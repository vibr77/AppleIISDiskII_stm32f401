/**
 * 
 * This is a file to store all the old functions
 * 
*/


void populateHalfDMASpiBuffer(char *buffer,int half){

  unsigned char c=0;
  unsigned char s=0;
  unsigned int i=0,j=0;
  unsigned sPos=(TxBytesSize/2)*half;                               // doing upfront calculation to avoid waisting compute cycle during for lop;
  unsigned ePos=sPos+TxBytesSize/2;
  unsigned int l=sPos*4;                                            // Half 0|1, buffer starting position is either 0 or 1024;        

  for (i=sPos;i<ePos;i++){
    c=buffer[i];

    for (j=0;j<8;j++){
      
       if (c & 0x80) 
        s|=1;
     
      if (j%2!=0){
        DMA_BIT_BUFFER[l]=s;
        l++;
        s=0;
      }else{
        s=s<<4;                                                      // Only populate the 4th value to do , 1us wait cycle, 1us wait cylce, 1us wait cycle, 1 us data cycle
      }
      c=c<<1;
    }
  }

}

void populateFullDMASpiBuffer(char * buffer){

  unsigned char c=0;
  unsigned char s=0;
  unsigned int i=0,j=0,l=0;

  for (i=0;i<TxBytesSize;i++){
    c=buffer[i];

    for (j=0;j<8;j++){
      
       if (c & 0x80) 
        s|=1;
     
      if (j%2!=0){
        
        DMA_BIT_BUFFER[l]=s;
        l++;
        s=0;
      }else{
        s=s<<4;                                                        // Only populate the 4th value to do , 1us wait cycle, 1us wait cylce, 1us wait cycle, 1 us data cycle
      }

      c=c<<1;
    }
  }
}




void process_SD_card( void )
{
  FATFS       FatFs;                //Fatfs handle
  FIL         fil;                  //File handle
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
    if (fres != FR_OK)
    {
      printf("No SD Card found : (%i)\r\n", fres);
      break;
    }
    printf("SD Card Mounted Successfully!!!\r\n");
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
    if(fres != FR_OK)
    {
      printf("File creation/open Error : (%i)\r\n", fres);
      break;
    }
    printf("Writing data!!!\r\n");
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
    //close your file
    f_close(&fil);
    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
    if(fres != FR_OK)
    {
      printf("File opening Error : (%i)\r\n", fres);
      break;
    }
    //read the data
    //f_gets(buf, sizeof(buf), &fil);
    UINT pt;
    f_read(&fil,buf,512,&pt);
    printf("Read Data : %s\n", buf);
    //close your file
    f_close(&fil);
    printf("Closing File!!!\r\n");
#if 0
    //Delete the file.
    fres = f_unlink(EmbeTronicX.txt);
    if (fres != FR_OK)
    {
      printf("Cannot able to delete the file\n");
    }
#endif
  } while( false );
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
  printf("SD Card Unmounted Successfully!!!\r\n");
}

*

DMA & Circular buffer Management 


/**
 * GPIO DMA MGNT
 *  
 * 
int DMA_BUFFER_SIZE=64;
uint32_t DMA_BUFFER[2048];                          // When using BSRR
//uint16_t DMA_BUFFER[2048];                            // when using ODR

void initeDMABuffer(char * buffer){                   // TODO check number of CPU cycle in C and Assembly
  
  // When using BSRR, we need 32 bit int
  
  uint32_t GPIO_14L_15L=   0xC0000000;                // No Data Pulse, No Clock
  uint32_t GPIO_14H_15H=   0x0000C000;                // Data HIGH, Clock HIGH
  uint32_t GPIO_14H_15L=   0x80004000;                // Data LOW,  Clock HIGH
  

  // When using ODR, we need 16 bit int
  //uint16_t GPIO_14L_15L=   0x0000;                     // No Data Pulse, No Clock
  //uint16_t GPIO_14H_15H=   0xC000;                     // Data HIGH, Clock HIGH
  //uint16_t GPIO_14H_15L=   0x4000;                     // Data LOW,  Clock HIGH
  
  char c=0;
  int l=0;

  for (int j=0;j<DMA_BUFFER_SIZE;j++){                            // Populate 128 Bytes, 8 bits each, and 4 x 1us step,
    c=buffer[j];                                     // DMA to GPIO will be based on a 1us frequency, so 72 clock cycle on a STM32F103,
    
    for (int k=0;k<8;k++){
                                                      // upfront compute for optimization,
      DMA_BUFFER[l]=GPIO_14L_15L;                     // Cycle 1 wait,                        
      DMA_BUFFER[l+1]=GPIO_14L_15L;                   // Cycle 2 wait,
      DMA_BUFFER[l+2]=GPIO_14L_15L;                   // Cycle 3 wait,             
      
      if (c & 0x80)                                   // AND x80, test if Bit 15 is 1, 0x1000 0000 0000 
        DMA_BUFFER[l+3]=GPIO_14H_15H;                 // Only populate the 4th value to do , 1us wait cycle, 1us wait cylce, 1us wait cycle, 1 us data cycle
      else
        DMA_BUFFER[l+3]=GPIO_14H_15L;                 // Assuming Bit 15 is 0, then GPIO 15 Low
      c=c<<1;
      l+=4;                                          // Left shift by 1 next iteration
    }                                           
  }
  return;
}

void populateHalfDMABuffer(char * buffer,int pos,int half){

  // GPIO13 -> Chip enable (active low)
  // GPIO14 -> Clock pulse
  // GPIO15 -> Data pulse

  // buffer correspond to the Sector char buffer,
  // pos is the current position in the buffer %64
  // Half is the first 0 or second half of the DMA array

  // When using BSRR, we need 32 bit int
  
  uint32_t GPIO_14H_15H=   0x0000C000;
  uint32_t GPIO_14H_15L=   0x80004000;
  

  // When using ODR, we need 16 bit
  //uint16_t GPIO_14H_15H=   0x0000;                     // Data HIGH, Clock HIGH
  //uint16_t GPIO_14H_15L=   0x8000;                     // Data LOW,  Clock HIGH

  char c=0;
  unsigned int l=half*1024;
  unsigned int bsize=DMA_BUFFER_SIZE/2;
  for (int i=0;i<bsize;i++){
    if ((pos+i)<402)
      c=buffer[pos+i];
    else 
      c=0x0;
    for (int j=0;j<8;j++){
      if (c & 0x80)
        DMA_BUFFER[l+3]=GPIO_14H_15H;
      else
        DMA_BUFFER[l+3]=GPIO_14H_15L;
      c=c<<1;
      l+=4;
    }
  }
  return;
}


// In function Main 

  /*
  t1 = DWT->CYCCNT;
  populateHalfDMABuffer(sectorBuf,32,);
  t2 = DWT->CYCCNT;
  diff = t2 - t1;
  printf("DMA Buffer populate first half CPU cycle: %ld\n",diff);
  */
 
  // Approach 1: Using Assembly code to issue SectorBuffer to GPIO        => NOt working even with disabling IRQ and ...

  //uint32_t prim;
  /* Read PRIMASK register, check interrupt status before you disable them */
  /* Returns 0 if they are enabled, or non-zero if disabled */
  //prim = __get_PRIMASK();
  /* Disable interrupts */
  //__disable_irq();

  //AppleIIDataPulse();
  
  /* Enable interrupts back */
  /*if (!prim) {
    __enable_irq();
  }*/

  // Approach 2: Using DMA to GPIO with backfill DMA Buffer IRQ 
  
  //DWT->CYCCNT = 0;
  //t1 = DWT->CYCCNT;
  //initeDMABuffer(sectorBuf);
  //t2 = DWT->CYCCNT;
  //diff = t2 - t1;
  //printf("timelapse 1 %ld cycle\n",diff);            // it gives 3ms to load the buffer
  
  //ClusterSlice=0;

   //hdma_tim2_up.XferHalfCpltCallback=HAL_DMA_HalfTxIntCallback;
  //hdma_tim2_up.XferCpltCallback=HAL_DMA_FullTxIntCallback;


  
  // When using BSRR
  //HAL_DMA_Start_IT(&hdma_tim2_up,  (uint32_t)DMA_BUFFER, (uint32_t)&(GPIOC->BSRR), 2048);
  // When using ODR
  //HAL_DMA_Start_IT(&hdma_tim2_up,  (uint32_t)DMA_BUFFER, (uint32_t)&(GPIOC->ODR), 2048);
  
  //HAL_TIM_Base_Start(&htim2);
  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
  //TIM2->DIER |= (1 << 8);   // set UDE bit (update dma request enable)

volatile int clusterSlice;
void HAL_DMA_HalfTxIntCallback(DMA_HandleTypeDef *hdma){
	  
     if (clusterSlice<14){
      clusterSlice++;
      // Half the buffer has been transmitted;
      populateHalfDMABuffer(sectorBuf,clusterSlice*DMA_BUFFER_SIZE/2,0);
     }else{
      __disable_irq(); 
      HAL_TIM_Base_Stop_DMA(&htim2);
      __enable_irq(); 
      prepareNewSector=1;
    }
}

void HAL_DMA_FullTxIntCallback(DMA_HandleTypeDef *hdma){
	  
    if (clusterSlice<14){
      clusterSlice++;
      populateHalfDMABuffer(sectorBuf,clusterSlice*DMA_BUFFER_SIZE/2,1);
    }
    else{
      __disable_irq(); 
      //hdma_tim2_up.XferCpltCallback=NULL;                      /* might not be necessary */
      HAL_TIM_Base_Stop_DMA(&htim2);
      __enable_irq(); 
      prepareNewSector=1;

    }  
}
